---
- name: <r_get_software_t_local_copy> compute the checksum of software package
  command:
    #become: yes
    #become_user:
    cmd: "{{ check_method }} {{ software_package }}"
    chdir: /tmp
    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *won't* be run.
    creates: "{{ unpacked_path }}/database"

    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *will* be run.
    #remove:
  register: checksum_result

- name: <r_get_software_t_local_copy> check the checksum of software package
  fail:
    msg: "The package is corrupted, please copy {{ software_package }} to /tmp again!" # not required. The customized message used for failing execution. If omitted, fail will simply bail out with a generic message.
  vars:
    skipped_search: "{{checksum_result.stdout | regex_search('(skipped)')}}"
    checksum_search: "{{checksum_result.stdout | regex_search('(4170261901 3453696911)')}}"
  when:
    - skipped_search == ''
    - checksum_search == ''

- name: "<r_get_software_t_local_copy> extract software package into {{ unpacked_path }}/"
  unarchive:
    src: "/tmp/{{ software_package }}"
    dest: "{{ unpacked_path }}/"
    owner: oracle
    group: oinstall
    mode: "0755"
    # If the specified absolute path (file or directory) already
    # exists, this step will *not* be run.
    creates: "{{ unpacked_path }}/database"
