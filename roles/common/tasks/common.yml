---
- name: <r_common_t_common> remove /etc/oraInst.loc file
  file:
    path: /etc/oraInst.loc
    state: absent

- name: <r_common_t_common> make sure new oracle sid is not in /etc/oratab
  lineinfile:
    path: /etc/oratab
    state: absent
    regexp: "^{{ oracle_sid }}"

- name: <r_common_t_common> start oracle universal installer in silent mode
  shell:
  become: yes
  become_method: su
  become_user: oracle
  #become_flags: "-s /bin/sh"
  args:
    cmd: "{{ oracle_home }}/database/runInstaller -force -silent -showProgress -waitForCompletion -noconfig -responseFile {{ oracle_home }}/database/db_inst.rsp"
    #chdir:
    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *won't* be run.
    #creates:

    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *will* be run.
    #remove:
  register: oui_result
  ignore_errors: yes

- name: <r_common_t_common> print output of rootInstaller command execution
  debug:
    msg: |
      {%- if oui_result.rc == 0 -%}
        {{ oui_result.stdout_lines }}
      {%- elif oui_result.rc != 0 -%}
        {{ oui_result.stderr_lines }}
      {%- endif -%}
  ignore_errors: yes
  failed_when: oui_result.rc != 0

- name: <r_common_t_common> run orainstRoot.sh
  shell:
  become: yes
  become_method: su
  become_user: root
  #become_flags: "-s /bin/sh"
  args:
    cmd: "{{ oracle_inventory }}/orainstRoot.sh"
    #chdir:
    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *won't* be run.
    #creates:

    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *will* be run.
    #remove:
  register: orainst_root_result
  ignore_errors: yes

- name: <r_common_t_common> print output of orainstRoot.sh script execution
  debug:
    msg: |
      {%- if orainst_root_result.rc == 0 -%}
        {{ orainst_root_result.stdout_lines }}
      {%- elif orainst_root_result.rc != 0 -%}
        {{ orainst_root_result.stderr_lines }}
      {%- endif -%}
  ignore_errors: yes
  failed_when: orainst_root_result.rc != 0

- name: <r_common_t_common> run root.sh script
  shell:
  become: yes
  become_method: su
  become_user: root
  #become_flags: "-s /bin/sh"
  args:
    cmd: "{{ oracle_home }}/root.sh"
    #chdir:
    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *won't* be run.
    #creates:

    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *will* be run.
    #remove:
  register: root_result
  ignore_errors: yes

- name: <r_common_t_common> print output of root.sh script execution
  debug:
    msg: |
      {%- if root_result.rc == 0 -%}
        {{ root_result.stdout_lines }}
      {%- elif root_result.rc != 0 -%}
        {{ root_result.stderr_lines }}
      {%- endif -%}
  ignore_errors: yes
  failed_when: root_result.rc != 0

- name: <r_common_t_common> run net configuration assistant in silent mode
  shell:
  become: yes
  become_method: su
  become_user: oracle
  #become_flags: "-s /bin/sh"
  args:
    cmd: "{{ oracle_home }}/bin/netca -silent -responsefile {{ oracle_home }}/netca.rsp"
    #chdir:
    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *won't* be run.
    #creates:

    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *will* be run.
    #remove:
  register: netca_result
  ignore_errors: yes

- name: <r_common_t_common> print output of netca command execution
  debug:
    msg: |
      {%- if netca_result.rc == 0 -%}
        {{ netca_result.stdout_lines }}
      {%- elif netca_result.rc != 0 -%}
        {{ netca_result.stderr_lines }}
      {%- endif -%}
  ignore_errors: yes
  failed_when: netca_result.rc != 0

- name: <r_common_t_common> run database configuration assistant in silent mode
  shell:
  become: yes
  become_method: su
  become_user: oracle
  #become_flags: "-s /bin/sh"
  args:
    cmd: "{{ oracle_home }}/bin/dbca -silent -createDatabase -responseFile {{ oracle_home }}/dbca.rsp"
    #chdir:
    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *won't* be run.
    #creates:

    # A filename or (since 2.0) glob pattern.
    # If it already exists, this step *will* be run.
    #remove:
  register: dbca_result
  ignore_errors: yes

- name: <r_common_t_common> print output of dbca command execution
  debug:
    msg: |
      {%- if dbca_result.rc == 0 -%}
        {{ dbca_result.stdout_lines }}
      {%- elif dbca_result.rc != 0 -%}
        {{ dbca_result.stderr_lines }}
      {%- endif -%}
  ignore_errors: yes
  failed_when: dbca_result.rc != 0
